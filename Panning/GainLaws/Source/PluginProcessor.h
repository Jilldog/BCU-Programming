/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_526ED7A9__
#define __PLUGINPROCESSOR_H_526ED7A9__

#include "../JuceLibraryCode/JuceHeader.h"
#define _USE_MATH_DEFINES
#include <math.h>


//==============================================================================
/**
*/
class GainLawsAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    GainLawsAudioProcessor();
    ~GainLawsAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);
    void reset();

    //==============================================================================
    bool hasEditor() const                  { return true; }
    AudioProcessorEditor* createEditor();

    //==============================================================================
    const String getName() const            { return JucePlugin_Name; }

    int getNumParameters();
    float getParameter (int index);
    void setParameter (int index, float newValue);
    const String getParameterName (int index);
    const String getParameterText (int index);

    const String getInputChannelName (int channelIndex) const;
    const String getOutputChannelName (int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;

    //==============================================================================
    int getNumPrograms()                                                { return 0; }
    int getCurrentProgram()                                             { return 0; }
    void setCurrentProgram (int /*index*/)                              { }
    const String getProgramName (int /*index*/)                         { return String::empty; }
    void changeProgramName (int /*index*/, const String& /*newName*/)   { }

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);

	bool silenceInProducesSilenceOut() const;
	double getTailLengthSeconds() const;


	void pluginONOFF(bool state);
	float ExpMovAv(float prevEMA, float input, float alpha);
	void changeMode();
	int getMode();
	void changePan(float newC);
    //==============================================================================

    // these are used to persist the UI's size - the values are stored along with the
    // filter's other Parameters, and the UI component will update them when it gets
    // resized.
    int lastUIWidth, lastUIHeight;

    //==============================================================================
    enum Parameters
    {
        Param1 = 0,
        Param2,

        totalNumParams
    };

	bool init;
	float var1, var2;

	float C, L, R;
	int panMode;

	float vuL,vuR,vuL_prev,vuR_prev;

	double polarity;

private:
    //==============================================================================
 bool pluginON;
	AudioSampleBuffer anotherBuffer;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GainLawsAudioProcessor);
};

#endif  // __PLUGINPROCESSOR_H_526ED7A9__
